import streamlit as st
import threading
import time
from scheduler.scheduler import TaskScheduler

st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if "logs" not in st.session_state:
    st.session_state.logs = []

if "scheduler" not in st.session_state:
    st.session_state.scheduler = TaskScheduler(st.session_state.logs)

if "task_running" not in st.session_state:
    st.session_state.task_running = False

st.title("üìÜ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö CoinGecko")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
with st.form("config_form"):
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤")

    col1, col2, col3 = st.columns(3)
    with col1:
        interval_tokens = st.number_input("TokenStats –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–µ–∫)", value=30, min_value=10, max_value=300)
    with col2:
        interval_exchanges = st.number_input("ExchangesStats –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—á–∞—Å—ã)", value=1, min_value=1, max_value=24)
    with col3:
        interval_details = st.number_input("–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—á–∞—Å—ã)", value=24, min_value=1, max_value=48)

    submitted = st.form_submit_button("üîÅ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")

    if submitted:
        st.session_state.scheduler.stop()
        st.session_state.scheduler = TaskScheduler(st.session_state.logs)
        st.session_state.scheduler.start(interval_tokens, interval_exchanges, interval_details)
        st.success(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω! TokenStats: {interval_tokens}—Å, Exchanges: {interval_exchanges}—á, Details: {interval_details}—á")

col1, col2 = st.columns(2)
with col1:
    if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"):
        st.session_state.scheduler.stop()
        st.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
with col2:
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
        st.rerun()

st.divider()

# –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
st.subheader("üéØ –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á")

def run_manual_task(task_func, task_name, logs_list):
    """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def run_task():
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            logs_list.append(f"[{timestamp}] –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π –∑–∞–¥–∞—á–∏: {task_name}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            task_func(logs_list)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            logs_list.append(f"[{timestamp}] –†—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task_name}")
            
        except Exception as e:
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            logs_list.append(f"[{timestamp}] [ERROR] {task_name}: {str(e)}")
        finally:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
            st.session_state.task_running = False
    
    if not st.session_state.task_running:
        st.session_state.task_running = True
        thread = threading.Thread(target=run_task, daemon=True)
        thread.start()
        st.success(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_name}")
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        time.sleep(2)
        st.rerun()
    else:
        st.warning("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Ç–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞...")

col1, col2, col3, col4 = st.columns(4)

with col1:
    if st.button("üìä TokenStats", disabled=st.session_state.task_running):
        from scheduler.tasks import manual_task_token_stats
        run_manual_task(manual_task_token_stats, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ TokenStats", st.session_state.logs)

with col2:
    if st.button("üè¢ ExchangesStats", disabled=st.session_state.task_running):
        from scheduler.tasks import manual_task_exchange_stats
        run_manual_task(manual_task_exchange_stats, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ExchangesStats", st.session_state.logs)

with col3:
    if st.button("üîç –î–µ—Ç–∞–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤", disabled=st.session_state.task_running):
        from scheduler.tasks import manual_task_token_details
        run_manual_task(manual_task_token_details, "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤", st.session_state.logs)

with col4:
    if st.button("üèõÔ∏è –î–µ—Ç–∞–ª–∏ –±–∏—Ä–∂", disabled=st.session_state.task_running):
        from scheduler.tasks import manual_task_exchange_details
        run_manual_task(manual_task_exchange_details, "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–∏—Ä–∂", st.session_state.logs)

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if st.session_state.task_running:
    st.info("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –∑–∞–¥–∞—á–∞...")

st.divider()

st.subheader("üìà –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
st.info("""
üöÄ **TokenStats**: –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (500 —Ç–æ–∫–µ–Ω–æ–≤)
üìä **ExchangesStats**: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å (100 –±–∏—Ä–∂)  
üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 24 —á–∞—Å–∞

üí° **–†—É—á–Ω—ã–µ –∑–∞–¥–∞—á–∏**: –ö–Ω–æ–ø–∫–∏ –≤—ã—à–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª—é–±—É—é –∑–∞–¥–∞—á—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
""")

st.divider()

st.subheader("üìú –õ–æ–≥–∏ –∑–∞–¥–∞—á")

col1, col2 = st.columns([4, 1])
with col1:
    st.text_area("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è", value="\n".join(st.session_state.logs[-30:]), height=400, key="logs_display")

with col2:
    st.write("**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**")
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"):
        st.session_state.logs.clear()
        st.rerun()
    
    if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"):
        logs_text = "\n".join(st.session_state.logs)
        st.download_button(
            label="üìÑ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏",
            data=logs_text,
            file_name=f"coingecko_logs_{time.strftime('%Y%m%d_%H%M%S')}.txt",
            mime="text/plain"
        )

st.empty()
time.sleep(0.1) 